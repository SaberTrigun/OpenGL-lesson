#version 330 core
#define NR_POINT_LIGHTS 4
out vec4 fragColor;

in vec3 normal;
in vec3 fragPos;
in vec2 texCoords;

uniform vec3 viewPos;

struct SpotLight {
	vec3 position;
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float cutOff;
	float outerCutOff;

	float constant;
	float linear;
	float quadratic;
};

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct PointLight{
	vec3 position;
	float constant;
	float linear;
	float quadratic;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


uniform Material	material;
uniform SpotLight	spotLight;
uniform DirLight	dirLight;
uniform PointLight	pointLights[NR_POINT_LIGHTS];

const int levels = 3;
const float scaleFactor = 1.0 / levels;
uniform vec3 Ka;
uniform vec3 Kd;

vec3 CalcDirectionLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 celShading();

void main() {
	vec3 norm = normalize(normal);
	vec3 viewDir = normalize(viewPos - fragPos);

	vec3 result = CalcDirectionLight(dirLight, norm, viewDir);

	for(int i = 0; i < NR_POINT_LIGHTS; i++)
		result += CalcPointLight(pointLights[i], norm, fragPos, viewDir);


	result += CalcSpotLight(spotLight, norm, fragPos, viewDir);

	celShading();

	fragColor = vec4(result, 1.0);
}

vec3 CalcDirectionLight(DirLight light, vec3 normal, vec3 viewDir){
	vec3 lightDir = normalize(-light.direction);

	float diff = max(dot(normal, lightDir), 0.0);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	vec3 ambient	= light.ambient * vec3(texture(material.diffuse, texCoords));
	vec3 diffuse	= light.diffuse * diff * vec3(texture(material.diffuse, texCoords));
	vec3 specular	= light.specular * spec * vec3 (texture(material.specular, texCoords));
	
	return (ambient + diffuse + specular);
}
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 lightDir = normalize(light.position - fragPos);

	float diff = max(dot(normal, lightDir), 0.0);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	vec3 ambient	= light.ambient * vec3(texture(material.diffuse, texCoords));
	vec3 diffuse	= light.diffuse * diff * vec3(texture(material.diffuse, texCoords));
	vec3 specular	= light.specular * spec * vec3(texture(material.specular, texCoords));
	ambient		*= attenuation;
	diffuse		*= attenuation;
	specular	*= attenuation;
	return (ambient + diffuse + specular);
}
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 lightDir = normalize(light.position - fragPos);

	float diff = max(dot(normal, lightDir), 0.0);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	float theta	= dot(lightDir, normalize(-light.direction));
	float epsilon	= light.cutOff - light.outerCutOff;
	float intensity	= clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	vec3 ambient	= light.ambient * vec3(texture(material.diffuse, texCoords));
	vec3 diffuse	= light.diffuse * diff * vec3(texture(material.diffuse, texCoords));
	vec3 specular	= light.specular * spec * vec3(texture(material.specular, texCoords));

	ambient		*= attenuation * intensity;
	diffuse		*= attenuation * intensity;
	specular	*= attenuation * intensity;

	return (ambient + diffuse + specular);
}
vec3 celShading(){
	vec3 s = normalize(light.position.xyz - fragPos.xyz);
	float cosine = max(0.0, dot(s, normal));
	vec3 diffuse = Kd * floor(cosine * levels) * scaleFactor;
	return light.intensity * (Ka + diffuse);
}
